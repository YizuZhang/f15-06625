#+ASSIGNMENT: cstr-mult-ss
#+POINTS: 4
#+CATEGORY: homework
#+RUBRIC: (("technical" . 0.7) ("presentation" . 0.3))
#+DUEDATE: <2015-09-29 Tue>

Consider the reaction: $A \rightarrow products$ with the rate law $-r_A =
\frac{1.75 C_A}{(1 + 10 C_A)^2}$. In class, we observed the possibility of
multiple steady states depending on the reaction and reactor
conditions. Assuming that $\nu = 0.15$ L/min with the inlet concentration of
$C_A = 1.5$ mol/L and the CSTR volume is $V = 5$ L, plot the transient
concentration of A out to steady state conditions of the CSTR reactor for
different initial conditions of $C_A(t=0) = 0 to 1.5$. Explain qualitatively why
you get two different answers.

* Solution
To solve this problem we need to integrate the time-dependent mole balance of a CSTR:

\(\frac{dN_A}{dt} = Fa0 - Fa + rA V \)

where rA is given in the problem statement, and the initial condition varies. We can do this by varying the initial condition in the call to odeint. Remember that the initial condition must be the number of moles of A in the reactor, not the concentration.

#+BEGIN_SRC python
import numpy as np
from scipy.integrate import odeint

Ca0 = 1.5
v0 = 0.15
V = 5.0

Fain = Ca0 * v0

def cstr(Fa, t):

    Ca = Fa / v0
    ra = -1.75 * Ca / ((1.0 + 10.0 * Ca)**2)
    dFadt = Fain - Fa + ra * V
    return dFadt

tspan = np.linspace(0, 20, 100)

# sol should be the number of moles in the system
sol1 = odeint(cstr, 0.0, tspan)
sol2 = odeint(cstr, 1.5 * V, tspan)

import matplotlib.pyplot as plt

plt.plot(tspan, sol1 / V, label='$C_A$(t=0)=0.0')
plt.plot(tspan, sol2 / V, label='$C_A$(t=0)=1.5')
plt.xlabel('time (min)')
plt.ylabel('$C_A$')

plt.legend()
plt.xlabel('time (min)')
plt.ylabel('$C_A$')

# you need to zoom to see the relevant features at steady state.
plt.ylim([0, 0.1])
plt.savefig('soln.png')

# [[./soln.png]]
#+END_SRC

#+RESULTS:

You might wonder if some other concentration could get to another solution. Let's try this for lots of concentrations next.

#+BEGIN_SRC python
import numpy as np
from scipy.integrate import odeint

Ca0 = 1.5
v0 = 0.15
V = 5.0

Fain = Ca0 * v0

def cstr(Fa, t):

    Ca = Fa / v0
    ra = -1.75 * Ca / ((1.0 + 10.0 * Ca)**2)
    dFadt = Fain - Fa + ra * V
    return dFadt

tspan = np.linspace(0, 20, 100)


import matplotlib.pyplot as plt

for Ca0 in np.linspace(0, 0.05):
    sol = odeint(cstr, Ca0 * V, tspan)
    plt.plot(tspan, sol/V)


plt.xlabel('time (min)')
plt.ylabel('$C_A$')

plt.xlabel('time (min)')
plt.ylabel('$C_A$')

# you need to zoom to see the relevant features at steady state.
plt.ylim([0, 0.06])

plt.savefig('soln-2.png')

# [[./soln-2.png]]
#+END_SRC

#+RESULTS:

You can see that all initial concentrations converge to one of two different solutions. From the lecture you might recall there are three possible steady-state solutions, but we only see two here. The middle one is not actually stable, so it is not observed. Next we look at what happens when there are small perturbations from each possible root.

#+BEGIN_SRC python
import numpy as np
from scipy.optimize import fsolve

Ca0 = 1.5
v0 = 0.15
V = 5.0

Fain = Ca0 * v0

@np.vectorize
def dNadt(Fa, t=0):
    Ca = Fa / v0
    ra = -1.75 * Ca / ((1.0 + 10.0 * Ca)**2)
    dFadt = Fain - Fa + ra * V
    return dFadt

Faspan = np.linspace(0, 0.2)

# graphical solution to where the steady state solutions are
import matplotlib.pyplot as plt
plt.plot(Faspan, dNadt(Faspan))
plt.savefig('obj.png')
# [[./obj.png]]

# numerical solution to the roots
r1, = fsolve(lambda fa: dNadt(fa, 0), 0.01)
r2, = fsolve(lambda fa: dNadt(fa, 0), 0.03)
r3, = fsolve(lambda fa: dNadt(fa, 0), 0.15)

print('The roots are at {}'.format([r1, r2, r3]))

# check for stability to perturbations
print('r1: ',[dNadt(0.9*r1), dNadt(r1), dNadt(1.1*r1)])

print('r2: ',[dNadt(0.9*r2), dNadt(r2), dNadt(1.1*r2)])

print('r3: ',[dNadt(0.9*r3), dNadt(r3), dNadt(1.1*r3)])




#+END_SRC

#+RESULTS:
: The roots are at [0.011108835627466321, 0.029521173483184907, 0.15436999088934938]
: ('r1: ', [array(0.005010652082255845), array(-5.551115123125783e-17), array(-0.003687496048316835)])
: ('r2: ', [array(-0.003375538020896879), array(2.7755575615628914e-17), array(0.0034112905612636857)])
: ('r3: ', [array(0.009111221987942356), array(-3.7470027081099033e-16), array(-0.010062635269898298)])

You can see in these results that for the first root, r1, negative perturbation, dNa/dt is positive which pushes it back to the root, and similarly for a positive perturbation dNa/dt is negative, which pushes it back to the root. The same thing is true for r3.

For r2, a different result is observed. For a negative concentration perturbation dNa/dt is negative, which pushes the solution down to r1, and for a positive perturbation dNa/dt is positive, which pushes it up to r3. Thus, the root at r2 is not stable.
