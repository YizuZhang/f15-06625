#+ASSIGNMENT: cstr-kinetics
#+POINTS: 4
#+CATEGORY: homework
#+RUBRIC: (("technical" . 0.7) ("presentation" . 0.3))
#+DUEDATE: <2015-10-29 Thu 23:59>

The liquid-phase irreversible reaction $\ce{A -> B + C}$ was carried out in a CSTR. To learn the rate law, the residence time was varied by changing the volumetric flow. Pure A enters the reactor at a concentration of 2M. The steady state concentration of A was measured for the following residence times.

1. Determine the reaction rate law, and the values of the rate constant and reaction order, and confidence intervals on them.

#+BEGIN_SRC python
import numpy as np

Ca0 = 2.0  # mol / L

tau = np.array([15.0, 38.0, 100.0, 300, 1200])  # minutes
Ca = np.array([1.5, 1.25, 1.0, 0.75, 0.5])  # mol / L
#+END_SRC



* Solution

We have from a mole balance on the CSTR

0 = Fa0 - Fa + rA * V
  = Ca0 * vo - Ca * vo + rA * V

We assume that -rA = k Ca ** alpha, which leads to the following equation after we divide each term by vo.

0  = Ca0 - Ca - k*Ca**alpha * tau

This leads to

\frac{Ca - Ca0}{tau} = -k * Ca**alpha

or:

ln(\frac{Ca0 - Ca}{tau}) = ln(k) + alpha ln(Ca)

So, a plot of ln(\frac{Ca0 - Ca}{tau}) vs ln(Ca) should be linear, with an  intercept of ln(k), and a slope of alpha.

#+BEGIN_SRC python
import numpy as np
import matplotlib.pyplot as plt
from pycse import regress

Ca0 = 2.0  # mol / L

tau = np.array([15.0, 38.0, 100.0, 300, 1200])  # minutes
Ca = np.array([1.5, 1.25, 1.0, 0.75, 0.5])  # mol / L

x = np.log(Ca)
y = np.log((Ca0 - Ca) / tau)

X = np.column_stack([x, x**0])
p, pint, se = regress(X, y, 0.05)

print('alpha = {}'.format(pint[0]))
print('k interval = {}'.format(np.exp(pint[1])))

plt.plot(x, y, 'bo', x, np.dot(X, p))
plt.xlabel('x')
plt.ylabel('y')
plt.legend(['data', 'fit'], loc='best')
plt.savefig('soln.png')
#  [[./soln.png]]

# we can verify this
alpha, lnk = p
k = np.exp(lnk)

print k, alpha
from scipy.optimize import fsolve

C = []
for i, TAU in enumerate(tau):
    def cstr(_Ca):
        return Ca0 - _Ca - k * _Ca**alpha * TAU
    C.append(fsolve(cstr, Ca[i]))

plt.figure()
plt.plot(tau, Ca, 'bo ', tau, C)
plt.xlabel(r'$\tau$')
plt.ylabel('$C_A$')
plt.savefig('soln-verify.png')
# [[./soln-verify.png]]
#+END_SRC

#+RESULTS:
: alpha = [ 2.94422087  3.05540946]
: k interval = [ 0.00975496  0.01019216]
: 0.00997116397192 2.99981516733

It appears the reaction is third-order in A, and the rate constant is about 0.01 (L/mol)^2/min with a high degree of confidence.


** nonlinear fit
It is tricky to do this. We cannot find a function Ca = f(tau; k, alpha), but we can find one that is tau = f(Ca; k, alpha)

0 = Ca0 - Ca - k*Ca**alpha*tau

tau = (Ca - Ca0) / (-k*Ca**alpha)

#+BEGIN_SRC python
import numpy as np
import matplotlib.pyplot as plt
from pycse import nlinfit

Ca0 = 2.0  # mol / L

tau = np.array([15.0, 38.0, 100.0, 300, 1200])  # minutes
Ca = np.array([1.5, 1.25, 1.0, 0.75, 0.5])  # mol / L

def model(Ca, k, alpha):
    return (Ca - Ca0) / (-k * Ca**alpha)

p, pint, se = nlinfit(model, Ca, tau, [0.01, 3])

print p
print pint
#+END_SRC

#+RESULTS:
: [ 0.00985767  2.97948278]
: [[ 0.00966731  0.01004804]
:  [ 2.95081387  3.00815168]]

** A way to use odeint

The transient mole balance is

dNa/dt = Ca0*v0 - Ca*v0 - k*Ca**alpha * V

if we divide by V, we have

dCa/dt = Ca0/tau - Ca/tau - k*Ca**alpha

we could integrate this to find the steady state concentration of A for some k and alpha. It is a little tricky to make sure you integrate long enough to make sure you hit steady state, since some tau values are large.


#+BEGIN_SRC python
import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint
from pycse import nlinfit

Ca0 = 2.0  # mol / L

tau = np.array([15.0, 38.0, 100.0, 300, 1200])  # minutes
Ca = np.array([1.5, 1.25, 1.0, 0.75, 0.5])  # mol / L

def ode(Ca, t, _tau, k, alpha):
    return Ca0 / _tau - Ca / _tau - k * Ca**alpha

@np.vectorize
def model(tau, k, alpha):
    tspan = np.linspace(0, 10000)
    Ca = odeint(ode, Ca0, tspan, args=(tau, k, alpha))
    return Ca[-1]

print model(38, 0.01, 3)
p, pint, se = nlinfit(model, tau, Ca, [0.01, 3])

print p
print pint
#+END_SRC

#+RESULTS:
: [ 1.25280495]
: [ 0.00997779  3.00145623]
: [[ 0.00980433  0.01015126]
:  [ 2.94850067  3.05441179]]
