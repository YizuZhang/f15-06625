#+DRAWERS: SOLUTION

* Builtin Data types in Python

** Integers
Integers are pure numbers with no decimal in them. They can be represented exactly on a computer. Integers can be positive, negative or zero.

#+BEGIN_SRC python
print(1, 0, -1)
print(type(1))
#+END_SRC

#+RESULTS:
: (1, 0, -1)
: <type 'int'>


When performing mathematical operations with integers, you must be aware that computers can treat integers differently than float numbers in some cases. Addition, subtraction and multiplication do not contain any surprises.

#+BEGIN_SRC python
print(1 + 3)
print(1 - 3)
print(1 * 3)
#+END_SRC

#+RESULTS:
: 4
: -2
: 3

Division can be different. 

#+BEGIN_SRC python
print(1 / 3)
#+END_SRC

#+RESULTS:
: 0

Surprised? Integer division results in an integer.  When there are leftovers, or a remainder, only the integer part is returned. 

Take a few minutes to think about what the results of the following divisions should be, then run the block or click [[elisp:(re-search-forward ":SOLUTION:")][here]] and press Tab.

#+NAME: integer-division
#+BEGIN_SRC python
print(4/1)
print(4/2)
print(4/3)
print(4/4)
print(4/5)
#+END_SRC

:SOLUTION:
#+RESULTS: integer-division
: 4
: 2
: 1
: 1
: 0

The first two results are not surprising, the division is exact. The third result might be a surprise, but three goes into four one time, and we discard the remainder. 
:END:

The integer division described above is the default behavior in Python2. In Python3, the default behavior is being changed to be more like Matlab, where all division is implied to give floats if the answer is not an integer. We can obtain that behavior in Python2 by importing the future behavior like this:

#+BEGIN_SRC python
from __future__ import division
print(1 / 3)   # implied float division
print(1 // 3)  # integer division
#+END_SRC

#+RESULTS:
: 0.333333333333
: 0

*** Really big integers

#+BEGIN_SRC python
import sys
print(sys.maxint)
#+END_SRC

#+RESULTS:
: 9223372036854775807

*** An application of integer division
Why is it useful to have integer division? The answer is that integer math is very fast, and exact. There are times we do not care about the remainder either. Suppose we have 169 seats, arranged in rows of 13 seats, but numbered consecutively from seat 0 to seat 168. We can use integer math to quickly figure out which row a particular seat is in. We simply divide the seat number by 13, and the answer is the row the seat is in (starting with row 0). For example: 

#+BEGIN_SRC python
print(2 / 13)
print(21 / 13)
print(26 / 13)
print(168 / 13)
#+END_SRC

#+RESULTS:
: 0
: 1
: 2
: 12

There is no ambiguity, no rounding issues, etc... in the answers. They are all exact integers.
** Float numbers
Float numbers are another import class of data type. A float number is a number with a decimal place in it, like 3.14, or -1.414.

#+BEGIN_SRC python
print(3.14)
print(type(3.14))
#+END_SRC

#+RESULTS:
: 3.14
: <type 'float'>

Addition, subtraction, multiplication and division all should work as expected. 

#+BEGIN_SRC python
print(1.0 + 1.5)
print(1.0 - 1.5)
print(1.0 * 1.5)
print(1.0 * 0.0)
print(1.0 / 1.5)
#+END_SRC

#+RESULTS:
: 2.5
: -0.5
: 1.5
: 0.0
: 0.666666666667

Note that if you have a float and an integer in the expression, the result will be a float.

#+BEGIN_SRC python
print(1.0 / 3)
#+END_SRC

#+RESULTS:
: 0.333333333333

** Complex numbers
There is also a complex number data type. You create a complex number by adding a j right after the number.

#+BEGIN_SRC python
print(2 + 1j)
print(type(2 + 1j))
#+END_SRC

#+RESULTS:
: (2+1j)
: <type 'complex'>

Alternatively, you can create a complex number like this:
#+BEGIN_SRC python
print(complex(2, 1))
#+END_SRC

#+RESULTS:
: (2+1j)

We will not need complex numbers much. There is a lot of documentation on what you can do with them here: pydoc:cmath
